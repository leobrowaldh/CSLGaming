@using CSLGaming.UI.Services
@inject UIService Service;

<nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <!-- Logo -->
        <a class="navbar-brand" href="#">
            <img src="/images/image.png" alt="CSL-gaming logo" width="120" height="30">
        </a>

        <!-- Toggler -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Collapsible Content -->
        <div class="collapse navbar-collapse justify-content-center" id="navbarSupportedContent">
            <!-- Menu Items -->
            <ul class="navbar-nav mb-2 mb-lg-0">
                <li class="nav-item">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        @CurrentChoice.ToString()
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" @onclick="() => UpdateChoice(Choice.Game)">Game</a></li>
                        <li><a class="dropdown-item" href="#" @onclick="() => UpdateChoice(Choice.Genere)">Genere</a></li>
                        <li><a class="dropdown-item" href="#" @onclick="() => UpdateChoice(Choice.Category)">Category</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="#">Something else here</a></li>
                    </ul>
                </li>
            </ul>

            <!-- Search Form -->
            <div class="d-flex">
                <input @oninput="e => UpdateSearchText(e)" class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-success" type="button" @onclick="() => ChoiceSearch(Service)">Search</button>
            </div>
        </div>

        <!-- Login and Cart Buttons -->
        <div class="d-flex">
            <!-- Login Button -->
            <a class="btn btn-primary me-2" href="#">
                <i class="bi bi-person"></i> Login
            </a>

            <!-- Cart Button -->
            <a class="btn btn-primary" href="#">
                <i class="bi bi-cart"></i>
            </a>
        </div>
    </div>
</nav>




@code {
    @code {
        private string? searchText;

        public enum Choice { Category, Game, Genere }
        public Choice CurrentChoice { get; set; } = Choice.Category;

        [Parameter] public EventCallback OnChange { get; set; }

        private void UpdateChoice(Choice choice)
        {
            CurrentChoice = choice;
        }

        private void UpdateSearchText(ChangeEventArgs e)
        {
            searchText = e.Value?.ToString();
        }

       

        protected override async Task OnInitializedAsync()
        {
            if (Service is not null)
            {
                await Service.GetLinkGroup();
                await OnChange.InvokeAsync();
            }
        }

        private async void ChoiceSearch(UIService db)
        {
            if (CurrentChoice == Choice.Category && OnChange.HasDelegate && Service is not null)
            {
                await db.GetIdByName(searchText);
                await db.GetLinkGroup();
                await db.GetProductsAsync();
                await OnChange.InvokeAsync();
            }
            else if (CurrentChoice == Choice.Game && OnChange.HasDelegate && Service is not null)
            {
                await db.GetProductsByNameAsync(searchText);
                await OnChange.InvokeAsync();

            }
            else if (CurrentChoice == Choice.Genere && OnChange.HasDelegate && Service is not null)
            {
                await db.GetProductsByGenereAsync(searchText);
                await OnChange.InvokeAsync();
            }
            else
            {
                return;
            }

            var TEST = searchText;
        }
    }
}


