@using CSLGaming.UI.Services
@inject NavigationManager NavigationManager
<nav class="navbar navbar-expand-lg">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand" href="/" @onclick="ReloadPage">
            <img src="/images/Logo3.png" alt="CSL-gaming logo" width="100" height="80">
        </a>

        <!-- Toggler -->
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <!-- Collapsible Content -->
        <div class="collapse navbar-collapse justify-content-center" id="navbarSupportedContent">
            <!-- Menu Items -->
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="width: 100px; color: white;">
                        @{
                            // Logic to find the selected LinkOption and set CurrentChoice accordingly
                            var selectedLink = Service!.CategoryLinkGroups[0].LinkOptions.FirstOrDefault(l => l.IsSelected);
                            if (selectedLink != null)
                            {
                                CurrentChoice = selectedLink.CategoryType;
                            }
                        }
                        @CurrentChoice.ToString()
                    </a>

                    <ul class="dropdown-menu bg-dark">
                        <style>
                            .dropdown-item.text-white:hover {
                                background-color: grey;
                            }
                        </style>
                        @foreach (var group in Service!.CategoryLinkGroups)
                        {
                            @foreach (var linkOption in group.LinkOptions)
                            {
                                <li>
                                    <a class="dropdown-item @(linkOption.IsSelected ? "ps-30" : "ps-3") text-white" href="@($"/")" @onclick="async () => { await OnCategoryLinkClick(linkOption.Id); }">
                                        @linkOption.CategoryType
                                        @if (linkOption.IsSelected)
                                        {
                                            <i class="bi-caret-left"></i>
                                        }
                                    </a>
                                </li>
                                if (group != Service!.CategoryLinkGroups[0]) break; //condition so the only group generating links is the first one.
                            }
                        }
                    </ul>
                </li>
            </ul>

            <!-- Search Form -->
            <form class="d-flex">
                <input class="form-control me-2 bg-dark text-white" type="search" placeholder="Search" aria-label="Search" style="color: white;">
                <style>
                    .form-control::placeholder {
                        color: white;
                        opacity: 1;
                    }
                </style>
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
        </div>

        <!-- Login and Cart Buttons -->
        <div class="d-flex">
            <!-- Login Button -->
            <a class="btn btn-primary me-2" href="#">
                <i class="bi bi-person"></i> Login
            </a>

            <!-- Cart Button -->
            <button type="button" class="btn btn-primary position-relative" data-bs-toggle="modal" data-bs-target="#cart">
                <i class="bi bi-cart"></i>
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @Service.CartItems.Count()
                </span>

            </button>

        </div>
    </div>
</nav>


<CartComponent OnChange="OnCartChange" />

<div class="blue-margin">
    <style>
        /* CSS for thin blue margin */
        .blue-margin {
            height: 1px; /* Adjust the height of the margin as needed */
            background-color: blue; /* Adjust the color of the margin as needed */
            width: 100%; /* Make the margin span the entire width of the page */
        }
    </style>
</div>

@code {
    [CascadingParameter(Name = "Service")] public UIService? Service { get; set; }
    [Parameter] public EventCallback OnChange { get; set; } // Updaterar sidan

    public void OnCartChange()
    {
        if (OnChange.HasDelegate && Service is not null)
        {
            OnChange.InvokeAsync();
        }
    }

    public string CurrentChoice { get; set; } = "Categories";

    private async Task OnCategoryLinkClick(int id)
    {
        if (Service is not null)
        {
            //CurrentChoice = Service!.CategoryLinkGroups.SelectMany(g => g.LinkOptions).FirstOrDefault(l => l.Id == id)?.CategoryType ?? "Default";
            CurrentChoice = Service!.CategoryLinkGroups[0].LinkOptions.FirstOrDefault(l => l.Id == id)?.CategoryType ?? "Default";
            await Service.OnCategoryLinkClick(id);

            await OnChange.InvokeAsync();
            // Perform any additional actions if needed 
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Service is not null)
        {
            await Service.GetLinkGroup();
            await OnChange.InvokeAsync();
        }
    }

    private async void ReloadPage()
    {
        Service.CurrentCategoryId = 0;
        CurrentChoice = "Categories";
        await OnChange.InvokeAsync();
        //NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}



