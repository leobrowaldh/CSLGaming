@page "/"
@using AutoMapper
@using CSLGaming.API.DTO
@using CSLGaming.UI.Admin.Services

@inject AdminCategoryService Service;
@inject IMapper mapper;

<PageTitle>Home</PageTitle>

<button type="button" class="btn btn-primary" @onclick="()=> ShowUpdate = !ShowUpdate">Update</button>
<button type="button" class="btn btn-success" @onclick="()=> ShowAdd = !ShowAdd">Add New</button>

@foreach (var category in Service.Categories)
{
    <div class="container mt-4">
        <h2>@category.CategoryType</h2>

        <!-- Input form for updating values -->
        @if (ShowUpdate)
        {
            <div class="form-group">
                <label for="newCategoryType_@category.Id">New Category Type:</label>
                <input type="text" class="form-control" id="newCategoryType_@category.Id" @bind="category.CategoryType" />
            </div>

            <button type="button" class="btn btn-primary" @onclick="()=> UpdateEntity(category)">Confirm</button>
        }

        <!-- Input form for deleting a category -->
        

        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@category.Id</td>
                    <td>@category.CategoryType</td>
                </tr>
            </tbody>
        </table>
        @if (!ShowUpdate)
        {
            <button type="button" class="btn btn-danger" @onclick="() => { ShowDelete = !ShowDelete; SelectedCategoryId = category.Id; }">Delete</button>
        }
    </div>
}

<!-- Modal for adding a new category -->
@if (ShowAdd)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Category</h5>
                    <button type="button" class="close" @onclick="()=> ShowAdd = !ShowAdd">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newCategoryType_Add">New Category Type:</label>
                        <input type="text" class="form-control" id="newCategoryType_Add" @bind="entityName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" @onclick="() => AddEntity(entityName)">Confirm</button>
                    <button type="button" class="btn btn-secondary" @onclick="()=> ShowAdd = !ShowAdd">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal for deleting a category -->
@if (ShowDelete)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Category</h5>
                    <button type="button" class="close" @onclick="()=> ShowDelete = !ShowDelete">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this category?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="()=> DeleteEntity()">Confirm Delete</button>
                    <button type="button" class="btn btn-secondary" @onclick="()=> ShowDelete = !ShowDelete">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    string errorMessage;
    bool ShowUpdate = false;
    bool ShowAdd = false;
    bool ShowDelete = false;
    int SelectedCategoryId;
    string? entityName;

    [Parameter] public EventCallback OnChange { get; set; }

    

    public async Task UpdateEntity(CategoryGetDTO category)
    {
        var mappedC = mapper.Map<CategoryPutDTO>(category);

        if (Service is not null)
        {
            await Service.UpdateAdminCategory(mappedC.Id, mappedC);
        }
        ShowUpdate = false;

        await UpdatePage();
    }

    public async Task AddEntity(string name)
    {
        if (Service is not null)
        {
            await Service.AddAdminCategory(name);
        }
        ShowAdd = false;
        await UpdatePage();
    }

    public async Task DeleteEntity()
    {
        if (Service is not null)
        {
            await Service.DeleteAdminCategory(SelectedCategoryId);
        }
        ShowDelete = false;
        await UpdatePage();
    }

    protected override async Task OnInitializedAsync()
    {
        if (Service is not null)
        {
            await Service.AdminGetAllCategories();
            ShowUpdate = false;
        }

        
    }

    public async Task UpdatePage()
    {
        await OnChange.InvokeAsync();
    }
}
